extends layout

block content

	style.
		/*body {
			background:#ffffff;
			padding:0;
			margin:0;
			font-weight: bold;
			overflow:hidden;
		}*/

		canvas{
			width: 350px !important;
			height: 85% !important;
		}

	script(src="/javascripts/threejs/build/more/three.min.js")

	script(src="/javascripts/threejs/examples/js/effects/AnaglyphEffect.js")

	script(src="/javascripts/threejs/examples/js/Detector.js")

	script(src="/javascripts/threejs/threex.dynamictexture.js")


	script.
		var wordwrap = function(long_string, max_char){

		var sum_length_of_words = function(word_array){
		var out = 0;
		if (word_array.length!=0){
		for (var i=0; i<word_array.length; i++){
		var word = word_array[i];
		out = out + word.length;
		}
		};
		return out;
		}

		var split_out = [[]];
		var split_string = long_string.split(' ');
		for (var i=0; i<split_string.length; i++){
		var word = split_string[i];

		if ((sum_length_of_words(split_out[split_out.length-1]) + word.length) > max_char){
		split_out = split_out.concat([[]]);
		}

		split_out[split_out.length-1] = split_out[split_out.length-1].concat(word);
		}

		for (var i=0; i<split_out.length; i++){
		split_out[i] = split_out[i].join(" ");
		}

		return split_out.join('\n');
		};






		/*if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

		var container;

		var data = ["Hi", "There", "Hello", "Again","Welcome", "Back"];

		var camera, scene, renderer, effect;

		var mesh, lightMesh, geometry;
		var spheres = [];

		var directionalLight, pointLight;

		var mouseX = 0;
		var mouseY = 0;

		var windowHalfX = window.innerWidth / 2;
		var windowHalfY = window.innerHeight / 2;

		document.addEventListener( 'mousemove', onDocumentMouseMove, false );

		init();
		animate();

		function init() {

			container = document.createElement( 'div' );
			document.body.appendChild( container );

			camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 0.01, 100 );
			camera.position.z = 3;
			camera.focalLength = 3;

			var path = "/images/three/";
			var format = '.png';
			var urls = [
				path + 'px_' + format, path + 'nx_' + format,
				path + 'py_' + format, path + 'ny_' + format,
				path + 'pz_' + format, path + 'nz_' + format
			];

			var textureCube = new THREE.CubeTextureLoader().load( urls );

			scene = new THREE.Scene();
			// scene.background = textureCube;
			scene.background = new THREE.Color( "white" )

			var dynamicTexture  = new THREEx.DynamicTexture(256,256);
			// var t = new THREE.TextGeometry('bamhi');
			dynamicTexture.context.font	= "bolder 15px Verdana"
			dynamicTexture.drawText('Last Transactions', 48, 128, 'white');

			var dynamicTexture1  = new THREEx.DynamicTexture(256,256);
			//var t = new THREE.TextGeometry('exosome');
			dynamicTexture1.context.font	= "bolder 25px Verdana"
			dynamicTexture1.drawText('exosome', 48, 128, 'white');

			var dynamicTexture2  = new THREEx.DynamicTexture(256,256);
			//var t = new THREE.TextGeometry('reactif more than chem');
			dynamicTexture2.context.font	= "bolder 25px Verdana"
			dynamicTexture2.drawText('reactif more than chem', 48, 128, 'white');

			var geometry = new THREE.SphereBufferGeometry( 0.15, 32, 32);
			//var geometry = new THREE.SphereBufferGeometry( 0.1, 32, 16 );
			var material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture.texture } );
			// var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );
			// map: THREE.ImageUtils.loadTexture('/images/three/px.png') 
			// var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube, map : dynamicTexture.texture } );

			var prop = 0;
			for ( var i = 0; i < 20; i ++ ) {
				material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture2.texture } );
				//dynamicTexture.texture.needsUpdate  = true
				if(i%2==0){
					material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture.texture } );
				}
				if(i%3==0){
					material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture1.texture } );
				}
				var proptext = data[prop];
				console.log("prop: " + proptext);
				//dynamicTexture.clear('');
				//dynamicTexture.drawText(proptext, 48, 128, 'white');
				//prop++;
				//material = new THREE.MeshBasicMaterial( { color: 0xffffff, map : dynamicTexture.texture } );

				var mesh = new THREE.Mesh( geometry, material );

				mesh.position.x = Math.random() * 10 - 5;
				mesh.position.y = Math.random() * 10 - 5;
				mesh.position.z = Math.random() * 10 - 5;

				mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;

				scene.add( mesh );

				spheres.push( mesh );

			}

			//

			renderer = new THREE.WebGLRenderer( { antialias: false } );
			renderer.setClearColor( 0xffffff );
			renderer.setPixelRatio( window.devicePixelRatio );
			container.appendChild( renderer.domElement );

			var width = window.innerWidth || 2;
			var height = window.innerHeight || 2;

			effect = new THREE.AnaglyphEffect( renderer );
			effect.setSize( width, height );

			//

			window.addEventListener( 'resize', onWindowResize, false );

		}

		function onWindowResize() {

			windowHalfX = window.innerWidth / 2;
			windowHalfY = window.innerHeight / 2;

			camera.aspect = window.innerWidth / window.innerHeight;
			camera.updateProjectionMatrix();

			effect.setSize( window.innerWidth, window.innerHeight );

		}

		function onDocumentMouseMove(event) {

			mouseX = ( event.clientX - windowHalfX ) / 100;
			mouseY = ( event.clientY - windowHalfY ) / 100;

		}

		//

		function animate() {

			requestAnimationFrame( animate );

			render();

		}

		function render() {

			var timer = 0.0001 * Date.now();

			camera.position.x += ( mouseX - camera.position.x ) * .05;
			camera.position.y += ( - mouseY - camera.position.y ) * .05;

			camera.lookAt( scene.position );

			for ( var i = 0, il = spheres.length; i < il; i ++ ) {

				var sphere = spheres[ i ];

				sphere.position.x = 5 * Math.cos( timer + i );
				sphere.position.y = 5 * Math.sin( timer + i * 1.1 );

			}

			effect.render( scene, camera );

		}*/



		var objects = [];
		var raycaster = new THREE.Raycaster();
		var mouse = new THREE.Vector2();
		document.addEventListener( 'mousedown', onDocumentMouseDown, false );

		var scene = new THREE.Scene();
		scene.background = new THREE.Color( "white" );
		var camera = new THREE.PerspectiveCamera(400, 300/(window.innerHeight * 0.95), 1, 10000);

		var renderer = new THREE.WebGLRenderer( { antialias: true } );
		renderer.setSize(220, window.innerHeight * 0.9);
		renderer.setClearColor( 0xffffff );
		document.body.appendChild(renderer.domElement);

		var colors = [0x8a6d3b,0x3d9dcb,0x337ab7];

		var geometry = new THREE.BoxGeometry(100, 100, 100, 10, 10, 10) /*new THREE.SphereBufferGeometry( 300, 32, 32)*/;
		var geometry1 = /*new THREE.BoxGeometry(50, 50, 50, 10, 10, 10)*/ new THREE.SphereBufferGeometry( 50, 32, 32);
		var geometry2 = new THREE.BoxGeometry(300, 100, 100, 10, 10, 10)

		var dynamicTexture  = new THREEx.DynamicTexture(64,64);
		dynamicTexture.context.font	= "normal 3px Verdana"
		dynamicTexture.drawText('Last Transactions', 16, 32, 'white');

		var material = new THREE.MeshBasicMaterial({color: 0x8a6d3b, wireframe: true /*, map: dynamicTexture.texture*/ }); // yoke color
		var material1 = new THREE.MeshBasicMaterial({color: 0x3d9dcb, wireframe: true }); // lab color
		var material2 = new THREE.MeshBasicMaterial({color: 0x337ab7, wireframe: true }); // logo color
		var cube = new THREE.Mesh(geometry, material);
		var cube1 = new THREE.Mesh(geometry1, material1);
		var cube2 = new THREE.Mesh(geometry1, material);
		var cube3 = new THREE.Mesh(geometry2, material);
		var cube4 = new THREE.Mesh(geometry1, material2);
		scene.add(cube4);
		scene.add(cube1);
		scene.add(cube2);

		objects.push( cube4 );
		objects.push( cube1 );
		objects.push( cube2 );

		var mesh1, mesh2, mesh3;

		var loader = new THREE.FontLoader();

		loader.load( '/javascripts/threejs/fonts/helvetiker_regular.typeface.json', function ( font ) {

		var t = "Exosome";

		var test_string = "this is a long string that should be word wrapped, hopefully";
		console.log(wordwrap(test_string, 5));

		var textGeo = new THREE.TextGeometry( wordwrap(t, 20), {font: font, size: 10,height: 3} );

		var textGeo2 = new THREE.TextGeometry( wordwrap("Bamhi", 20), {font: font, size: 10,height: 3} );

		var textGeo3 = new THREE.TextGeometry( wordwrap("Reactif", 20), {font: font, size: 10,height: 3} );

		var textMaterial = new THREE.MeshPhongMaterial( { color: 0xff0000 } );

		mesh1 = new THREE.Mesh( textGeo, textMaterial );
		mesh2 = new THREE.Mesh( textGeo2, textMaterial );
		mesh3 = new THREE.Mesh( textGeo3, textMaterial );

		scene.add( mesh1 );
		scene.add( mesh2 );
		scene.add( mesh3 );

		} );

		camera.position.z = 1000;
		camera.position.y = window.innerHeight * 0.3;
		console.log("height camera: " + window.innerHeight * 0.3);

		function onDocumentMouseDown( event ) {

			event.preventDefault();

			mouse.x = ( event.clientX / renderer.domElement.clientWidth ) * 2 - 1;
			mouse.y = - ( event.clientY / renderer.domElement.clientHeight ) * 2 + 1;

			raycaster.setFromCamera( mouse, camera );

			var intersects = raycaster.intersectObjects( objects );

			if ( intersects.length > 0 ) {
				var col = intersects[ 0 ].object.material.color.getHex();
				console.log(col);
				var rand = Math.floor((Math.random() * 3));
				console.log("rand: "+rand);
				intersects[ 0 ].object.material.color.setHex( colors[rand]);

				/*var particle = new THREE.Sprite( particleMaterial );
				particle.position.copy( intersects[ 0 ].point );
				particle.scale.x = particle.scale.y = 16;
				scene.add( particle );
				*/

			}

			/*
			// Parse all the faces
			for ( var i in intersects ) {

				intersects[ i ].face.material[ 0 ].color.setHex( Math.random() * 0xffffff | 0x80000000 );

			}
			*/
		}


		function render() {
		requestAnimationFrame(render);

		var timer = 0.00007 * Date.now();
		//cube.position.x = 5 * Math.cos( timer );
		//cube.position.y = 5 * Math.sin( timer * 1.1 );

		//cube1.position.x = 50 * Math.cos( timer);
		cube1.position.y = (window.innerHeight / 2) * Math.cos( timer * 2.1);

		cube2.position.y = 0.8 * (window.innerHeight / 2) * Math.cos(timer * 3.1);
		cube2.position.x = 105;

		cube4.position.y = (window.innerHeight / 2) * Math.cos( timer * 3.1 );
		cube4.position.x = -105;

		mesh2.position.set( cube2.position.x - 15, cube2.position.y + 60, 0);
		mesh3.position.set( cube4.position.x - 15, cube4.position.y + 60, 0);
		mesh1.position.set( -25, cube1.position.y + 60, 0);

		//console.log("cube1.position.y: " + cube1.position.y);

		//console.log("cube2.position.y: " + cube2.position.y);

		//cube1.position.z = 50 * Math.cos( timer);

		cube.rotation.x += 0.01;
		cube.rotation.y += 0.01;
		cube.rotation.z += 0.01;

		cube3.rotation.y = 10;
		//cube3.rotation.y = 20;
		//cube3.rotation.z = 0.01;

		cube1.rotation.x += 0.02;
		cube1.rotation.y += 0.02;

		cube4.rotation.x += 0.02;
		cube4.rotation.y += 0.02;

		cube2.rotation.x += 0.02;
		cube2.rotation.y += 0.02;
		cube2.rotation.y += 0.02;





		renderer.render(scene, camera);
		};

		render();
